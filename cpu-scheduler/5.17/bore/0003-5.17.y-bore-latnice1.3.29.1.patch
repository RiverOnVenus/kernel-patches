From 310c16c35b6d65dbd895bf6413b031fa51819528 Mon Sep 17 00:00:00 2001
From: Masahito S <firelzrd@gmail.com>
Date: Sat, 14 May 2022 11:24:38 +0900
Subject: [PATCH] 5.17.y-bore-latnice1.3.29.1

---
 include/linux/sched.h   |  3 +++
 init/Kconfig            | 19 +++++++++++++++++
 kernel/sched/core.c     |  4 ++++
 kernel/sched/debug.c    |  4 ++++
 kernel/sched/fair.c     | 45 +++++++++++++++++++++++++++++++----------
 kernel/sched/features.h |  4 ++++
 kernel/sched/sched.h    |  4 ++++
 7 files changed, 72 insertions(+), 11 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 66b321edf..bf4d56385 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -576,6 +576,9 @@ struct sched_entity {
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
+#ifdef CONFIG_SCHED_BORE
+	u64				burst_time;
+#endif // CONFIG_SCHED_BORE
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	int				depth;
diff --git a/init/Kconfig b/init/Kconfig
index d5aebf11d..26fc47288 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1282,6 +1282,25 @@ config CHECKPOINT_RESTORE
 
 	  If unsure, say N here.
 
+config SCHED_BORE
+	bool "Burst-Oriented Response Enhancer"
+	default y
+	help
+	  In Desktop and Mobile computing, one might prefer interactive
+	  tasks to keep responsive no matter what they run in the background.
+
+	  Enabling this kernel feature modifies the scheduler to discriminate
+	  tasks by their burst time (runtime since it last went sleeping or
+	  yielding state) and prioritize those that run less bursty.
+	  Such tasks usually include window compositor, widgets backend,
+	  terminal emulator, video playback, games and so on.
+	  With a little impact to scheduling fairness, it may improve
+	  responsiveness especially under heavy background workload.
+
+	  Enabling this feature implies NO_GENTLE_FAIR_SLEEPERS by default.
+
+	  If unsure say Y here.
+
 config SCHED_AUTOGROUP
 	bool "Automatic process group scheduling"
 	select CGROUPS
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 05b18bdc3..3b11fef27 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -9362,6 +9362,10 @@ void __init sched_init(void)
 	BUG_ON(&dl_sched_class + 1 != &stop_sched_class);
 #endif
 
+#ifdef CONFIG_SCHED_BORE
+	printk(KERN_INFO "BORE (Burst-Oriented Response Enhancer) CPU Scheduler modification 1.3.29.1 by Masahito Suzuki");
+#endif // CONFIG_SCHED_BORE
+
 	wait_bit_init();
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index efa9ff966..a43eff4af 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -316,6 +316,10 @@ static __init int sched_init_debug(void)
 
 	debugfs_create_u32("latency_warn_ms", 0644, debugfs_sched, &sysctl_resched_latency_warn_ms);
 	debugfs_create_u32("latency_warn_once", 0644, debugfs_sched, &sysctl_resched_latency_warn_once);
+#ifdef CONFIG_SCHED_BORE
+	debugfs_create_u16("burst_penalty_scale", 0644, debugfs_sched, &sysctl_sched_burst_penalty_scale);
+	debugfs_create_u8("burst_reduction_bits_deq", 0644, debugfs_sched, &sysctl_sched_burst_reduction_bits_deq);
+#endif // CONFIG_SCHED_BORE
 
 #ifdef CONFIG_SMP
 	debugfs_create_file("tunable_scaling", 0644, debugfs_sched, NULL, &sched_scaling_fops);
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index b273c2064..c47df5d6a 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -19,6 +19,9 @@
  *
  *  Adaptive scheduling granularity, math enhancements by Peter Zijlstra
  *  Copyright (C) 2007 Red Hat, Inc., Peter Zijlstra
+ *
+ *  Burst-Oriented Response Enhancer (BORE) CPU Scheduler
+ *  Copyright (C) 2021 Masahito Suzuki <firelzrd@gmail.com>
  */
 #include "sched.h"
 
@@ -106,6 +109,11 @@ static unsigned int normalized_sysctl_sched_wakeup_granularity	= 1000000UL;
 
 const_debug unsigned int sysctl_sched_migration_cost	= 500000UL;
 
+#ifdef CONFIG_SCHED_BORE
+unsigned short __read_mostly sysctl_sched_burst_penalty_scale = 1176;
+unsigned char  __read_mostly sysctl_sched_burst_reduction_bits_deq = 2;
+#endif // CONFIG_SCHED_BORE
+
 int sched_thermal_decay_shift;
 static int __init setup_sched_thermal_decay_shift(char *str)
 {
@@ -864,6 +872,10 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	struct sched_entity *curr = cfs_rq->curr;
 	u64 now = rq_clock_task(rq_of(cfs_rq));
 	u64 delta_exec;
+#ifdef CONFIG_SCHED_BORE
+	u32 msb, logbt, burst_score;
+	struct task_struct *p;
+#endif // CONFIG_SCHED_BORE
 
 	if (unlikely(!curr))
 		return;
@@ -885,6 +897,21 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
+#ifdef CONFIG_SCHED_BORE
+	curr->burst_time += delta_exec;
+	msb = fls64(curr->burst_time);
+	logbt = msb ? msb - 1 : 0;
+	burst_score = (((logbt << 10) | ((curr->burst_time << (64 - (logbt
+		? logbt : 1))) >> 54)) * sysctl_sched_burst_penalty_scale) >> 20;
+	curr->vruntime += mul_u64_u32_shr(
+		calc_delta_fair(delta_exec, curr),
+		sched_prio_to_wmult[min(burst_score, (u32)39)], 22);
+	if (entity_is_task(curr)) {
+		p = task_of(curr);
+		p->latency_prio = min(burst_score, (u32)39);
+		curr->latency_weight = sched_latency_to_weight[p->latency_prio];
+	}
+#endif // CONFIG_SCHED_BORE
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
 	update_min_vruntime(cfs_rq);
 
@@ -5633,9 +5660,6 @@ static void check_preempt_from_idle(struct cfs_rq *cfs, struct sched_entity *se)
 {
 	struct sched_entity *next;
 
-	if (se->latency_weight <= 0)
-		return;
-
 	if (cfs->nr_running <= 1)
 		return;
 	/*
@@ -5791,6 +5815,9 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 	for_each_sched_entity(se) {
 		cfs_rq = cfs_rq_of(se);
 		dequeue_entity(cfs_rq, se, flags);
+#ifdef CONFIG_SCHED_BORE
+		se->burst_time >>= sysctl_sched_burst_reduction_bits_deq;
+#endif // CONFIG_SCHED_BORE
 
 		cfs_rq->h_nr_running--;
 		cfs_rq->idle_h_nr_running -= idle_h_nr_running;
@@ -7078,14 +7105,7 @@ static long wakeup_latency_gran(struct sched_entity *curr, struct sched_entity *
 	int latency_weight = se->latency_weight;
 	long thresh = sysctl_sched_latency;
 
-	/*
-	 * A positive latency weigth means that the sched_entity has latency
-	 * requirement that needs to be evaluated versus other entity.
-	 * Otherwise, use the latency weight to evaluate how much scheduling
-	 * delay is acceptable by se.
-	 */
-	if ((se->latency_weight > 0) || (curr->latency_weight > 0))
-		latency_weight -= curr->latency_weight;
+	latency_weight -= curr->latency_weight;
 
 	if (!latency_weight)
 		return 0;
@@ -7491,6 +7511,9 @@ static void yield_task_fair(struct rq *rq)
 	struct task_struct *curr = rq->curr;
 	struct cfs_rq *cfs_rq = task_cfs_rq(curr);
 	struct sched_entity *se = &curr->se;
+#ifdef CONFIG_SCHED_BORE
+	se->burst_time >>= sysctl_sched_burst_reduction_bits_deq;
+#endif // CONFIG_SCHED_BORE
 
 	/*
 	 * Are we the only task in the tree?
diff --git a/kernel/sched/features.h b/kernel/sched/features.h
index cfff560e0..6bf0e3457 100644
--- a/kernel/sched/features.h
+++ b/kernel/sched/features.h
@@ -4,7 +4,11 @@
  * them to run sooner, but does not allow tons of sleepers to
  * rip the spread apart.
  */
+#ifdef CONFIG_SCHED_BORE
+SCHED_FEAT(GENTLE_FAIR_SLEEPERS, false)
+#else // CONFIG_SCHED_BORE
 SCHED_FEAT(GENTLE_FAIR_SLEEPERS, true)
+#endif // CONFIG_SCHED_BORE
 
 /*
  * Place new tasks ahead so that they do not starve already running
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 4b188eb6e..193dc0b88 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2445,6 +2445,10 @@ extern unsigned int sysctl_sched_idle_min_granularity;
 extern unsigned int sysctl_sched_wakeup_granularity;
 extern int sysctl_resched_latency_warn_ms;
 extern int sysctl_resched_latency_warn_once;
+#ifdef CONFIG_SCHED_BORE
+extern unsigned short sysctl_sched_burst_penalty_scale;
+extern unsigned char sysctl_sched_burst_reduction_bits_deq;
+#endif // CONFIG_SCHED_BORE
 
 extern unsigned int sysctl_sched_tunable_scaling;
 
-- 
2.30.2

